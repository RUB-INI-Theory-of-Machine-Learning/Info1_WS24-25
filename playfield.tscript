class Playfield {
	public:
		var bitmap = [];
		
		constructor(width, height){
			this.bitmap.push(Array(width+2,"f"));
			for 0:height do	this.bitmap.push(Array(width+2, 0));
			
			for var row in this.bitmap do {
				row[0] = "f";
				row[width+1] = "f";
			}
			
			this.bitmap.push(Array(width+2,"f"));
		}
		
		function insert_tetromino(tetromino){
			for var i in 0:tetromino.bitmap().size() do 
				for var j in 0:tetromino.bitmap()[0].size() do 
					if tetromino.bitmap()[i][j] != 0 then this.bitmap[tetromino.row + i][tetromino.column + j] = tetromino.bitmap()[i][j];
		}
		
		function check_collision(tetromino){	
			for var row in 0:tetromino.bitmap().size() do {
				for var column in 0:tetromino.bitmap()[row].size() do {
					if tetromino.bitmap()[row][column] != 0 then {
						if this.bitmap[row + tetromino.row][column + tetromino.column] != 0 then return true;
					}
				}
			}
			return false;
	}

	function remove_full_rows(top_row){
		var full_rows = [];

		for var row in top_row:math.min(top_row+4,21) do {
			var is_full = true;
			for var column in 0:this.bitmap[row].size() do {
				if this.bitmap[row][column] == 0 then {
					is_full = false;
					break;
				}

			}
			if is_full then full_rows.push(row);

		}

		for var row_idx in full_rows do
		{
			this.bitmap.remove(row_idx);

			var row = ["f"];
			for 0:10 do row.push(0);
			row.push("f");

			this.bitmap.insert(1, row);
		}


		return full_rows.size();
	}
	
	function insert_garbage(num){
		var gap = Integer((math.random() * 10));

		var line = [];
		for var col in 0:12 do line.push("g");
		line[gap+1] = 0;
		line[0] = "f";
		line[11] = "f";

		for var row in 0:num do {
			# insert line into playfield and remove top line of playfield
			this.bitmap.insert(21, deepcopy(line));
			this.bitmap.remove(1);
		}
	}
}