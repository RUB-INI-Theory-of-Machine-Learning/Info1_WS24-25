class Renderer {
	public:
		var block_size = 0;
		var outline_size = 0;
		
		constructor(){
			# We define the block size
			this.block_size = math.min(canvas.width() // 12, canvas.height() // 22);
			
			# We define the outline to be 1/10 of the block size
			this.outline_size = this.block_size/10;
		}
	
		function render(playfield, tetromino){
			# reset canvas
			canvas.setFillColor(0,0,0);
			canvas.clear();
		
			# render playfield
			for var row in 0:playfield.bitmap.size() do
				for var column in 0:playfield.bitmap[0].size() do
					if(playfield.bitmap[row][column] != 0) then this.draw_block(column, row, playfield.bitmap[row][column]);
		
			# render tetromino	
			#var bitmap = tetrominos[tetromino.shape][tetromino.rotation];	
			for var row in 0:tetromino.bitmap().size() do
				for var column in 0:tetromino.bitmap()[0].size() do
					if(tetromino.bitmap()[row][column] != 0) then this.draw_block(
							column+tetromino.column, 
							row+tetromino.row, 
							tetromino.bitmap()[row][column]
						);	
		}
		# pos_x and pos_y are in units of blocks! Conversion to pixels happens internally. 
		function draw_block(pos_x, pos_y, color) {
			pos_x = pos_x * block_size;
			pos_y *= block_size;
			
			# draw the block
			canvas.setFillColor(colors[color]["light"][0]/255, 
								colors[color]["light"][1]/255, 
								colors[color]["light"][2]/255, 
								1);
			canvas.fillRect(pos_x, pos_y, block_size, block_size);
		
			canvas.setFillColor(colors[color]["dark"][0]/255, 
							    colors[color]["dark"][1]/255, 
							    colors[color]["dark"][2]/255, 
							    1);
			canvas.fillArea([
								[pos_x + block_size, pos_y], 
								[pos_x, pos_y+block_size],
								[pos_x + block_size, pos_y + block_size]
							]);
		
			canvas.setFillColor(colors[color]["base"][0]/255, 
						        colors[color]["base"][1]/255, 
						        colors[color]["base"][2]/255, 
						        1);
			canvas.fillRect(
				pos_x+outline_size,
				pos_y+outline_size,
				block_size-2*outline_size,
				block_size-2*outline_size
			);
		}
}