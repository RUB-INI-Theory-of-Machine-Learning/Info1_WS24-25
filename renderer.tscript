class Renderer {
	public:
		var block_size = 0;
		var outline_size = 0;
		var p_bitmap = [];
		var sidebar_size = 7;

		var p_tetromino, p_score, p_level, p_lines;

		constructor(){
			# We define the block size
			this.block_size = math.min(canvas.width() // 12 + this.sidebar_size, canvas.height() // 22);

			# We define the outline to be 1/10 of the block size
			this.outline_size = this.block_size/10;

			this.p_bitmap = Array(22, Array(12, 0));

			# init background
			canvas.setFillColor(0,0,0);
			canvas.clear();

			canvas.setFont("MS Comic Sans", block_size);
			this.draw_text( 12.5, 2, "Score");
			this.draw_text( 12.5, 5, "Level");
			this.draw_text( 12.5, 8, "Lines");
		}

		function render(playfield, tetromino, next_tetromino, score, level, lines){
			var bitmap_diff = [];
			var bitmap_cache = deepcopy(playfield.bitmap);

			playfield.insert_tetromino(tetromino);

			for var row in 0:playfield.bitmap.size() do {
				for var column in 0:playfield.bitmap[row].size() do {
					if playfield.bitmap[row][column] != this.p_bitmap[row][column] then {
						if playfield.bitmap[row][column] == 0 then bitmap_diff.push([row, column, "b"]);
						else  bitmap_diff.push([row, column, playfield.bitmap[row][column]]);
					}
				}
			}

			for var block in bitmap_diff do {
				this.draw_block(block[0], block[1], block[2]);
			}

			this.p_bitmap = deepcopy(playfield.bitmap);
			playfield.bitmap = bitmap_cache;

			# draw next tetromino
			if next_tetromino != this.p_tetromino then {
				this.draw_background(12.5, 16, 4, 4);
				var tetromino_bitmap = tetrominos[next_tetromino][0];
				for var row in 0:tetromino_bitmap.size() do {
					for var column in 0:tetromino_bitmap[row].size() do {
						if tetromino_bitmap[row][column] != 0 then this.draw_block(row + 16, column + 12.5, tetromino_bitmap[row][column]);
					}
				}
			}

			if p_score != score then {
				this.draw_background(12.5, 3, 4, 1);
				this.draw_text(12.5, 3, score);
			}

			if p_level != level then {
				this.draw_background(12.5, 6, 4, 1);
				this.draw_text(12.5, 6, level);
			}

			if p_lines != lines then {
				this.draw_background(12.5, 9, 4, 1);
				this.draw_text(12.5, 9, lines);
			}
		}

		function draw_background(x,y,w,h){
			# init background
			canvas.setFillColor(0,0,0);
			canvas.fillRect(
				x * block_size,
				y * block_size,
				w * block_size,
				h * block_size
			);
		}

		function draw_text(x, y, text){
			canvas.setFillColor(1,1,1);
			canvas.text(x * block_size, y * block_size, text);
		}


		# pos_x and pos_y are in units of blocks! Conversion to pixels happens internally.
		function draw_block(pos_y, pos_x, color) {
			pos_x = pos_x * block_size;
			pos_y *= block_size;
			
			# draw the block
			canvas.setFillColor(colors[color]["light"][0]/255, 
								colors[color]["light"][1]/255, 
								colors[color]["light"][2]/255, 
								1);
			canvas.fillRect(pos_x, pos_y, block_size, block_size);
		
			canvas.setFillColor(colors[color]["dark"][0]/255, 
							    colors[color]["dark"][1]/255, 
							    colors[color]["dark"][2]/255, 
							    1);
			canvas.fillArea([
								[pos_x + block_size, pos_y], 
								[pos_x, pos_y+block_size],
								[pos_x + block_size, pos_y + block_size]
							]);
		
			canvas.setFillColor(colors[color]["base"][0]/255, 
						        colors[color]["base"][1]/255, 
						        colors[color]["base"][2]/255, 
						        1);
			canvas.fillRect(
				pos_x+outline_size,
				pos_y+outline_size,
				block_size-2*outline_size,
				block_size-2*outline_size
			);
		}
}